
= スクラムアーティファクト

==[nonum] 「不便なら 創ってしまえ バックログ」
バックログをはじめ、スクラムを通じて作成していく各種のアーティファクトについては、私たちは当初、書籍などに記載されている標準的なものを利用していました。

しかしながら、実際にスクラムに沿って活動を進めていくと、プロダクトバックログとスプリントバックログのような関連する複数の情報同士の連携作業の不便さが目立ち始めました。その他にも、手入力箇所の多さ、項目の重複や齟齬など、不便と感じる個所が徐々に蓄積していきました。

こうした不便を解消するため、何か流用可能な既存のテンプレートがないかまずは探してみました。しかしながら、アーティファクトが組織や活動ごとの個別性がどうしても大きくなる部分であることを反映して、既存品の流用や書籍で紹介されている一般的事項だけでは自分たちが求めるものにはならないということが見えてきました。

このため私たちは、スクラムに則って活動するなかで見えてきた問題意識も踏まえて、活動全体を管理するためのツールを自分たち自身で創り上げることにし、そのために必要な要素について話し合いました。

この時点で、私たちはプロダクトバックログ及びスプリントバックログなどの基本的なアーティファクトのほか、後者をより詳細に分解した「スプリントタスク」や、メンバーごとのタスクを開発以外の事項も含めて管理するための「個人タスク」など、追加的なアーティファクトを作成して運用していました。
また、「学習」を主目的として活動する趣旨から、学びの状況を評価に付すことができるようにするため、学習の目標と達成度をまとめた表やモブプログラミングでの知識体系化ドキュメントなども情報として蓄積してきていました。

こうしたもの全てを一体的に管理しつつ、各活動が有機的に一つの目標に繋がっていくようにするため、最終的には以下のような構成をとるリレーショナルデータベースを作成し、Notion上に展開して利用することにしました。

【バックログ構成図のイメージ】
//image[backlog][バックログ構成図のイメージ]

このバックログでは、例えばプロダクトバックログに記載した情報はスプリントバックログの必要箇所にも自動で反映されるなど、より上位のアーティファクトに入力した内容が関連する各アーティファクトに自動的に連携される形にしました。
また、スプリントタスクに記載したモブプログラミングでの知見について、トピックベースでラベリングした情報とバックログアイテムとの関連付けを行うことで、後から参照する際にバックログの内容から探しやすくしたり、学習した知識を目標に関連付けて体系的に整理できたりするようにしました。
そのほかスプリントプランニングやデイリースクラムなどのスクラムイベントについてもより効果的に行えるようにするための工夫も追加することで、プロセス全体の向上に繋がりました。

ところで、バックログを一から創りなおすことで利便性が向上したのはもちろん素晴らしいことでしたが、このことによる最大の収穫は別のところに生じました。
議論の初めの出発点は、使いにくいアーティファクトをどうにかしたいという限定的な話題に過ぎなかったにもかかわらず、その見直し作業は、私たちのこれまでのワークフロー全体を俯瞰的かつ具体的に分析し、自分たちにとってのスクラム活動のあり方そのものを考える作業にいきついたのです。

これまで、私たちはバックログ以外にも、活動の中で不便と感じたところについては積極的に使用ツールの改善を通じてやり方を良くできないか模索してきました。
そのような活動の結果取り入れたり自ら作成したりしてきたものは多岐に渡っており、バーンダウンチャートの自動可視化ツール、GoogleMeetで使えるポモドーロタイマー、Githubコメント集計ツール、週報DB書き出しツール、GoogleMeetコメントフローツール、学習指標データベースなど、多くのものがあります。

これらの取り組みのように、目詰まりを起こしているプロセスをツールの改善によって見直しをするやり方は、改善策をより具体的なものにする良さを持っていたように思います。
例えば「レトロスペクティブはもっと"わいわい"やっていこう」という改善方針を立てたことがありました。こうした方針は、それだけでは曖昧な心がけになりかねないところがあります。しかしながら、単に心持ちとしてそういう姿勢で臨もうという話にとどめず、GoogleMeet上でニコニコ動画のようにコメントが流れていくツールを取り入れて場の雰囲気を演出したり、カジュアルなスタンプ表示の機能を備えるボードツールを使いつつ、各スタンプにそれぞれの意思を割り当てるルールをつくり、話しているメンバーに対してゆるめな雰囲気で意思表示できるようにするといった工夫は、ささやかなものではありますが、単に「わいわい」やっていこうという心持ちを確認しあうだけの場合と比べて、はるかに具体的な行動に結実しやすい工夫でした。

このバックログもモブプログラミングの知識体系化記録や学習目標の達成度データベースと一体化させることで、開発プロセスを「学び」に繋げていく意識づけを強める効果をもたらしました。

こうしてプロダクトだけでなく、プロセスを支えるツールについても、プロダクトと同じようにインクリメンタルにささやかな改善を重ねることで、ツールの不便解消だけにとどまらず、活動そのものを改善していくことに繋がっていきました。

